/home/ubuntu/workspace/pset1/cash/cash.c
[32mLooks good![0m
========
/home/ubuntu/workspace/pset1/credit/credit.c
========
/home/ubuntu/workspace/pset1/hello/hello.c
[32mLooks good![0m
[33mBut consider adding more comments![0m
========
/home/ubuntu/workspace/pset2/caesar/caesar.c
[32mLooks good![0m
[33mBut consider adding more comments![0m
========
/home/ubuntu/workspace/pset2/crack/crack.c
========
/home/ubuntu/workspace/pset2/vigenere/vigenere.c

[0m#include <stdio.h>
[0m#include <cs50.h>
[0m#include <string.h>
[0m#include <ctype.h>
[0m
[0mstring plain;
[0mstring key;
[0m
[0mint main(int argc, string argv[])
[0m{
[0m    // Get user input
[0m    if (argc != 2)
[0m    {
[0m        printf("SYNTAX: 'vigenere [key]'\n");
[0m        return 1;
[0m    }
[0m    key = argv[1];
[0m    for (int i = 0; i < strlen(key) - 1; i++)
[0m    {
[0m        if (isalpha(key[i]) == 0)
[0m        {
[0m            printf("SYNTAX: 'vigenere [key]'\n");
[0m            return 1;
[0m        }
[0m    }
[0m    plain = get_string("plaintext:");
[0m
[0m    // Declaration and initialization of input-related variables
[0m    int p = strlen(plain);
[0m    int k = strlen(key);
[0m    int ikey[k];
[0m    int ind = 0;
[0m
[0m    // Convert key into int array for easier processing
[0m    for (int i = 0; i < k; i++)
[0m    {
[0m        if (key[i] >= 'a' && key[i] <= 'z')[0m[42m\n[0m
[0m[42m        {\n[0m
[0m[42m           [0m ikey[i] = key[i] - 'a';[0m[42m\n[0m
[0m[42m        }[0m
[0m        else if (key[i] >= 'A' && key[i] <= 'Z')[0m[42m\n[0m
[0m[42m        {\n[0m
[0m[42m           [0m ikey[i] = key[i] - 'A';[0m[42m\n[0m
[0m[42m        }[0m
[0m    }
[0m
[0m
[0m
[0m    // Calculate and print ciphertext
[0m    printf("ciphertext:");
[0m    for (int i = 0; i < p; i++)
[0m    {
[0m        if (plain[i] >= 'a' && plain[i] <= 'z')
[0m        {
[0m            printf("%c", (((plain[i] - 'a') + ikey[ind % k]) % 26) + 'a');
[0m            ind++;
[0m        }
[0m        else if (plain[i] >= 'A' && plain[i] <= 'Z')
[0m        {
[0m            printf("%c", (((plain[i] - 'A') + ikey[ind % k]) % 26) + 'A');
[0m            ind++;
[0m        }
[0m        else
[0m        {
[0m            printf("%c", plain[i]);
[0m        }
[0m    }
[0m    printf("\n");
[0m
[0m    return 0;
[0m}

[42m\n[0m[33m means that you should insert a newline.[0m
[33mAnd consider adding more comments![0m

========
/home/ubuntu/workspace/pset3/music/helpers.c

[0m// Helper functions for music
[0m#include <stdio.h>
[0m
[0m#include <cs50.h>
[0m#include <math.h>
[0m#include <string.h>
[0m
[0m#include "helpers.h"
[0m
[0m// Converts a fraction formatted as X/Y to eighths
[0mint duration(string fraction)
[0m{
[0m    string a = &fraction[0];
[0m    string b = &fraction[2];
[0m    double c = atoi(a);
[0m    double d = atoi(b);
[0m    return c / d * 8;
[0m}
[0m
[0m// Calculates frequency (in Hz) of a note
[0mint frequency(string note)
[0m{
[0m    // Index of octave indicator in "note"
[0m    int oi = strlen(note) - 1;
[0m
[0m    // Number of semitones away from A4
[0m    int n = 0;
[0m
[0m    // Number of octave
[0m    string o = &note[oi];
[0m
[0m    // Add 12 semitones per octave
[0m    n += (12 * (atoi(o) - 4));
[0m
[0m    // Add/subtract one semitone if #/b avaible
[0m    if (strlen(note) == 3)
[0m    {
[0m        if (note[1] == '#')[0m[42m\n[0m
[0m[42m        {\n[0m
[0m[42m           [0m n++;[0m[42m\n[0m
[0m[42m        }[0m
[0m        else if (note[1] == 'b')[0m[42m\n[0m
[0m[42m        {\n[0m
[0m[42m           [0m n--;[0m[42m\n[0m
[0m[42m        }[0m
[0m    }
[0m
[0m    // Add semitones according to note
[0m    n += ((note[0] - 'A') * 2);
[0m    switch (note[0])
[0m    {
[0m        case 'C' :
[0m        case 'D' :
[0m        case 'E' :
[0m            n -= 13;
[0m            break;
[0m        case 'F' :
[0m        case 'G' :
[0m            n -= 14;
[0m            break;
[0m    }
[0m
[0m    // returns frequency of semitones away from A4
[0m    return round(pow(2, (n / 12.0)) * 440);
[0m}
[0m
[0m// Determines whether a string represents a rest
[0mbool is_rest(string s)
[0m{
[0m    return !(strcmp(s, ""));
[0m}

[42m\n[0m[33m means that you should insert a newline.[0m

========
/home/ubuntu/workspace/pset3/music/music.c
[32mLooks good![0m
[33mBut consider adding more comments![0m
========
/home/ubuntu/workspace/pset3/music/notes.c
[32mLooks good![0m
========
/home/ubuntu/workspace/pset3/music/synthesize.c
[32mLooks good![0m
========
/home/ubuntu/workspace/pset3/music/wav.c
[32mLooks good![0m
========
/home/ubuntu/workspace/pset4/recover/recover.c
[32mLooks good![0m
[33mBut consider adding more comments![0m
========
/home/ubuntu/workspace/pset4/whodunit/copy.c
[32mLooks good![0m
========
/home/ubuntu/workspace/pset4/whodunit/whodunit.c
[32mLooks good![0m
========
/home/ubuntu/workspace/pset5/speller/dictionary.c

[0m// Implements a dictionary's functionality
[0m
[0m#include <stdlib.h>
[0m#include <stdio.h>
[0m#include <stdbool.h>
[0m#include <string.h>
[0m
[0m#include "dictionary.h"
[0m
[0mTrie *lib;
[0mbool loaded = false;
[0munsigned int libSize = 0;
[0m
[0m
[0m
[0m// Returns true if word is in dictionary else false
[0mbool check(const char *word)
[0m{
[0m    // Add traverser
[0m    Trie *trav = lib;
[0m    for (int i = 0; i < strlen(word); i++)
[0m    {
[0m        int ind = getInd(word[i]);
[0m        if (trav->next[ind] == NULL)
[0m        {
[0m            return false;
[0m        }
[0m        trav = trav->next[ind];
[0m    }
[0m    return trav->eot;
[0m}
[0m
[0m// Loads dictionary into memory, returning true if successful else false
[0mbool load(const char *dictionary)
[0m{
[0m    // Allocate Space for trie
[0m    lib = newNode();
[0m
[0m    // Open file for read
[0m    FILE *fileptr = fopen(dictionary, "r");
[0m
[0m    // Check wether alloc and open worked
[0m    if (!lib || !fileptr)[0m[42m\n[0m
[0m[42m[0m [0m[41mreturn[0m [0m[41mfals[0m[42m  {\n[0m
[0m[42m        r[0me[0m[42mturn false[0m;[0m[42m\n[0m
[0m[42m    }[0m
[0m    // Traverse through lib-Trie and write library into it
[0m    else
[0m    {
[0m        char c = 0;
[0m        Trie *trav;
[0m        do
[0m        {
[0m            libSize++;
[0m            trav = lib;
[0m            while[0m[42m [0m(true)
[0m            {
[0m                c = fgetc(fileptr);
[0m                if (c == EOF)[0m[42m\n[0m
[0m[42m                {\n[0m
[0m[42m                   [0m break;[0m[42m\n[0m
[0m[42m                }[0m
[0m                if (c == '\n')
[0m                {
[0m                    trav->eot = true;
[0m                    break;
[0m                }
[0m                int ind = getInd(c);
[0m                if (trav->next[ind] == NULL)[0m[42m\n[0m
[0m[42m                {\n[0m
[0m[42m                   [0m trav->next[ind] = newNode();
[0m                [0m[42m}\n[0m
[0m[42m                [0mtrav = trav->next[ind];
[0m            }
[0m
[0m        }
[0m        while (c != EOF);
[0m        libSize--;
[0m        fclose(fileptr);
[0m        return true;
[0m    }
[0m}
[0m
[0m// Returns number of words in dictionary if loaded else 0 if not yet loaded
[0munsigned int size(void)
[0m{
[0m    // Returns variable set up by load function
[0m    return libSize;
[0m}
[0m
[0m// Unloads dictionary from memory, returning true if successful else false
[0mbool unload(void)
[0m{
[0m    // Self-explanatory
[0m    return destroy(lib);
[0m}
[0m
[0mint getInd(char c)
[0m{
[0m    // return index for specific letter
[0m    int ind = -1;
[0m    if (c == 39)[0m[42m\n[0m
[0m[42m    {\n[0m
[0m[42m       [0m ind = 26;[0m[42m\n[0m
[0m[42m    }[0m
[0m    else if (c >= 'a' && c <= 'z')[0m[42m\n[0m
[0m[42m    {\n[0m
[0m[42m       [0m ind = (c - 'a');[0m[42m\n[0m
[0m[42m    }[0m
[0m    else if (c >= 'A' && c <= 'Z')[0m[42m\n[0m
[0m[42m    {\n[0m
[0m[42m       [0m ind = (c - 'A');
[0m    [0m[42m}\n[0m
[0m[42m    [0mreturn ind;
[0m}
[0m
[0mbool destroy(Trie *head)
[0m{
[0m    // Recursively delete Trie
[0m    if (!head)
[0m    {
[0m        for (int i = 0; i < 27; i++)
[0m        {
[0m            if (!head->next[i])[0m[42m\n[0m
[0m[42m            {\n[0m
[0m[42m               [0m destroy(head->next[i]);[0m[42m\n[0m
[0m[42m            }[0m
[0m        }
[0m        free(head);
[0m    }
[0m    return 1;
[0m}
[0m
[0mTrie *newNode()
[0m{
[0m    // Allocate a new node and set the ptr[] to NULL
[0m    Trie *tmp = malloc(sizeof(Trie));
[0m    tmp->eot = false;
[0m    for (int i = 0; i < 27; i++)
[0m    {
[0m        tmp->next[i] = NULL;
[0m    }
[0m    return tmp;
[0m}

[42m\n[0m[33m means that you should insert a newline.[0m

========
/home/ubuntu/workspace/pset5/speller/speller.c
[32mLooks good![0m
========
